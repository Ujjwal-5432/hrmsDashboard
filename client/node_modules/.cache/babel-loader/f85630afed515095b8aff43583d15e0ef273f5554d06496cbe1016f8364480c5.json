{"ast":null,"code":"export const fetchCandidates = async () => {\n  try {\n    const token = localStorage.getItem('token'); // 🔐 Get token\n\n    const res = await axios.get('http://localhost:8000/api/candidates', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    setCandidates(res.data);\n    setLoading(false);\n  } catch (err) {\n    var _err$response;\n    console.error('Error fetching candidates:', ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n    setLoading(false);\n  }\n};\nexport const handleDownload = async candidate => {\n  try {\n    const token = localStorage.getItem('token'); // or however you're storing it\n\n    const res = await axios.get(`http://localhost:8000/api/candidates/${candidate._id}/resume`, {\n      responseType: 'blob',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (res.headers['content-type'].includes('application/json')) {\n      const text = await res.data.text();\n      const json = JSON.parse(text);\n      throw new Error(json.message || 'Unknown error');\n    }\n    const blob = new Blob([res.data], {\n      type: res.data.type\n    });\n    const url = window.URL.createObjectURL(blob);\n    const cd = res.headers['content-disposition'];\n    const filename = cd ? cd.split('filename=')[1].replace(/\"/g, '') : `${candidate.name}_resume.pdf`;\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  } catch (err) {\n    console.error('Download error:', err.message);\n    alert(`Failed to download resume: ${err.message}`);\n  }\n};","map":{"version":3,"names":["fetchCandidates","token","localStorage","getItem","res","axios","get","headers","Authorization","setCandidates","data","setLoading","err","_err$response","console","error","response","message","handleDownload","candidate","_id","responseType","includes","text","json","JSON","parse","Error","blob","Blob","type","url","window","URL","createObjectURL","cd","filename","split","replace","name","link","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","alert"],"sources":["/Users/aaryarastogi/Downloads/HRMS Dashboard/client/src/Components/Candidates/functions.js"],"sourcesContent":["export const fetchCandidates = async () => {\n    try {\n      const token = localStorage.getItem('token'); // 🔐 Get token\n\n      const res = await axios.get('http://localhost:8000/api/candidates', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      setCandidates(res.data);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error fetching candidates:', err.response?.data || err.message);\n      setLoading(false);\n    }\n  };\n\nexport const handleDownload = async (candidate) => {\n    try {\n      const token = localStorage.getItem('token'); // or however you're storing it\n  \n      const res = await axios.get(`http://localhost:8000/api/candidates/${candidate._id}/resume`, {\n        responseType: 'blob',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n  \n      if (res.headers['content-type'].includes('application/json')) {\n        const text = await res.data.text();\n        const json = JSON.parse(text);\n        throw new Error(json.message || 'Unknown error');\n      }\n  \n      const blob = new Blob([res.data], { type: res.data.type });\n      const url = window.URL.createObjectURL(blob);\n  \n      const cd = res.headers['content-disposition'];\n      const filename = cd\n        ? cd.split('filename=')[1].replace(/\"/g, '')\n        : `${candidate.name}_resume.pdf`;\n  \n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n  \n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      console.error('Download error:', err.message);\n      alert(`Failed to download resume: ${err.message}`);\n    }\n  };"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,sCAAsC,EAAE;MAClEC,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUP,KAAK;MAChC;IACF,CAAC,CAAC;IAEFQ,aAAa,CAACL,GAAG,CAACM,IAAI,CAAC;IACvBC,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAC,aAAA;IACZC,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAE,EAAAF,aAAA,GAAAD,GAAG,CAACI,QAAQ,cAAAH,aAAA,uBAAZA,aAAA,CAAcH,IAAI,KAAIE,GAAG,CAACK,OAAO,CAAC;IAC9EN,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC;AAEH,OAAO,MAAMO,cAAc,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF,MAAMlB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,wCAAwCa,SAAS,CAACC,GAAG,SAAS,EAAE;MAC1FC,YAAY,EAAE,MAAM;MACpBd,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUP,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAIG,GAAG,CAACG,OAAO,CAAC,cAAc,CAAC,CAACe,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC5D,MAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACM,IAAI,CAACa,IAAI,CAAC,CAAC;MAClC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAC7B,MAAM,IAAII,KAAK,CAACH,IAAI,CAACP,OAAO,IAAI,eAAe,CAAC;IAClD;IAEA,MAAMW,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACzB,GAAG,CAACM,IAAI,CAAC,EAAE;MAAEoB,IAAI,EAAE1B,GAAG,CAACM,IAAI,CAACoB;IAAK,CAAC,CAAC;IAC1D,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;IAE5C,MAAMO,EAAE,GAAG/B,GAAG,CAACG,OAAO,CAAC,qBAAqB,CAAC;IAC7C,MAAM6B,QAAQ,GAAGD,EAAE,GACfA,EAAE,CAACE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAC1C,GAAGnB,SAAS,CAACoB,IAAI,aAAa;IAElC,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGZ,GAAG;IACfS,IAAI,CAACI,QAAQ,GAAGR,QAAQ;IACxBK,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;IACZP,IAAI,CAACQ,MAAM,CAAC,CAAC;IAEbhB,MAAM,CAACC,GAAG,CAACgB,eAAe,CAAClB,GAAG,CAAC;EACjC,CAAC,CAAC,OAAOnB,GAAG,EAAE;IACZE,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEH,GAAG,CAACK,OAAO,CAAC;IAC7CiC,KAAK,CAAC,8BAA8BtC,GAAG,CAACK,OAAO,EAAE,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}